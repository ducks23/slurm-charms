version: 2.1

orbs:
  aws-cli: circleci/aws-cli@1.2.1
  slack: circleci/slack@3.4.2

workflows:
  test-build-deploy:
    jobs:
      - lint-charms:
          context: aws
      - build-and-deploy-charms-on-lxd:
          context: aws
          requires:
            - lint-charms
      - push-charms-to-s3:
          context: aws
          requires:
            - build-and-deploy-charms-on-lxd

jobs:
  lint-charms:
    docker:
      - image: circleci/python:3.6
    steps:
      - checkout
      - run:
          name: Install tox
          command: |
            sudo apt-get update
            sudo apt-get install -y tox
      - run:
          command: |
            make lint
      - slack/status:
          fail_only: false

  build-and-deploy-charms-on-lxd:
    machine:
      image: ubuntu-1604:202004-01
    environment:
      JUJU_DATA: /home/circleci/project/.local/share/juju
    steps:
      - checkout

      - run:
          name: "Install snapd"
          command: |
            sudo apt-get update
            sudo apt-get install --only-upgrade -y snapd
      - run:
          name: "Add /snap/bin to PATH"
          command: |
            echo 'export PATH=/snap/bin:$PATH' >> $BASH_ENV
            source /home/circleci/.bashrc
      - run:
          name: "Install charmcraft"
          command: |
            sudo snap install charmcraft --beta
      - run:
          name: "Build charms"
          command: |
            make charms
      - run:
          name: "Install LXD"
          command: |
            sudo apt-get purge lxd lxd-client lxcfs
            sudo snap install lxd
            sudo lxd init --auto
            sleep 5
            sudo /snap/bin/lxd.lxc network set lxdbr0 ipv6.address none
      - run:
          name: "Install Juju"
          command: |
            sudo apt-get purge juju
            sudo snap install juju --classic
      - run:
          name: "Install juju-wait"
          command: |
            sudo snap install juju-wait --classic
      - run:
          name: "Install jq"
          command: |
            sudo snap install jq
      - run:
          name: "Pull classic slurm snap from github"
          command: |
            make pull-classic-snap
      - run:
          name: "pull credentials from s3 and add model and deploy bundle"
          no_output_timeout: 20m
          command: |
            aws s3 cp s3://omnivector-cicd/juju-local/juju-local.tar.gz .
            tar -xzvf juju-local.tar.gz
            echo $JUJU_CIRCLECI_USER_PASSWORD | juju login --user circleci
            juju add-model circleci-$CIRCLE_SHA1
            juju model-config logging-config="<root>=DEBUG;juju.worker.dependency=CRITICAL;unit=DEBUG"
            juju add-space -m circleci-$CIRCLE_SHA1 nat 172.31.90.0/24 172.31.91.0/24 172.31.92.0/24 172.31.93.0/24
            juju deploy -m circleci-$CIRCLE_SHA1 ./bundles/slurm-core-bionic-aws/bundle.yaml

      - run:
          name: "Wait for deployment status"
          no_output_timeout: 20m
          command: |
            export PATH=$PATH:/snap/bin
            juju-wait -w -t 1150
            #- run:
            # name: "Verify slurmrestd"
            #  command: |
            #  sudo apt install python3-venv
            #  python3 -m venv venv
            #  source venv/bin/activate
            #  pip3 install python_jwt
            #  make test-slurmrestd-api-returns-200
      - run:
          name: "add 50 units"
          command: |
            juju add-unit slurmd -n 50
      - run:
          name: "Wait for deployment status"
          no_output_timeout: 20m
          command: |
            export PATH=$PATH:/snap/bin
            juju-wait -w -t 2150
      - run:
          name: "Show juju status"
          command: |
            juju status
      - run:
          name: "run sinfo"
          command: |
            juju run --unit slurmd/0 "sinfo"
          when: always

      - run:
          name: show juju logs
          command: |
            juju debug-log --no-tail --replay
          when: always

          #   - store_artifacts:
          #  path: /tmp/slurm-unit-logs
          # when: always

      - save_cache:
          name: Cache built charms once we validate they successfully deploy.
          key: built-slurm-charms-{{ .Environment.CIRCLE_SHA1 }}
          paths:
            - slurmrestd.charm
            - slurmctld.charm
            - slurmdbd.charm
            - slurmd.charm
      - run:
          name: "Force remove machine if hanging and destroy-model"
          command: |
            echo $JUJU_CIRCLECI_USER_PASSWORD | juju login --user circleci
            # Check to see if the model is empty, --force detroy-machines if not
            if ! [ `juju status 2>&1 | grep -c empty` -gt 0 ]; then
                juju remove-machine -m circleci-$CIRCLE_SHA1 {0..4} --force
            fi
            juju destroy-model circleci-$CIRCLE_SHA1 -y
          when: always
      - slack/status:
          fail_only: false

  push-charms-to-s3:
    executor: aws-cli/default
    steps:
      - checkout

      - aws-cli/setup:
          profile-name: default

      - restore_cache:
          name: Restore the charms from the cache to be pushed to s3
          key: built-slurm-charms-{{ .Environment.CIRCLE_SHA1 }}

      - run:
          name: "Push charms to s3"
          command: |
            make push-charms-to-edge
      - slack/status:
         fail_only: false
